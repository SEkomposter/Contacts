type: edu
custom_name: stage3
files:
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.v6.stage.BaseStageTest;\n\
    import org.hyperskill.hstest.v6.testcase.CheckResult;\nimport org.hyperskill.hstest.v6.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends BaseStageTest<TestClue> {\n\n    public ContactsTest()\
    \ throws Exception {\n        super(Main.class);\n    }\n\n    private CheckResult\
    \ splitActionsFeedback(int actualSize, String... actions) {\n        if (actualSize\
    \ != actions.length) {\n            return CheckResult.FALSE(String.format(\"\
    This test should contain %d actions: %s. \" +\n                            \"\
    You should separate your actions with an empty line.\",\n                    actions.length,\n\
    \                    String.join(\", \", actions)));\n        } else {\n     \
    \       return null;\n        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>>\
    \ generate() {\n        return List.of (\n            new TestCase<TestClue>()\n\
    \                .setInput(\"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"enter action\")) {\n                      \
    \  return new CheckResult(false,\n                            \"I didn't see where\
    \ \\\"Enter action\\\" part in the responsesFromClient\");\n                 \
    \   }\n                    return CheckResult.TRUE;\n                })),\n\n\
    \            new TestCase<TestClue>()\n                .setInput(\n          \
    \          \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"edit\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"no records to edit\")) {\n       \
    \                 return new CheckResult(false,\n                            \"\
    No \\\"No records to edit\\\" part \" +\n                                \"in\
    \ the responsesFromClient in a place where it should be\");\n                \
    \    }\n                    return CheckResult.TRUE;\n                })),\n\n\
    \            new TestCase<TestClue>()\n                .setInput(\n          \
    \          \"count\\n\" +\n                    \"remove\\n\" +\n             \
    \       \"exit\")\n                .setAttach(new TestClue(output -> {\n     \
    \               output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" part \" +\n                                \"in the responsesFromClient in\
    \ a place where it should be\");\n                    }\n                    return\
    \ CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.TRUE;\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.TRUE;\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"organization\\n\" +\n              \
    \          \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n\
    \                        \"+0 (123) 456-789-9999\\n\" +\n                    \"\
    info\\n\" +\n                        \"1\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n      \
    \                  || !infoBlock.contains(\"Address: Wall St. 1\")\n         \
    \               || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\")\n  \
    \                      || !infoBlock.contains(\"Time created:\")\n           \
    \             || !infoBlock.contains(\"Time last edit:\")) {\n               \
    \         return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.TRUE;\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"person\\n\" +\n                        \"John\\\
    n\" +\n                        \"Smith\\n\" +\n                        \"\\n\"\
    \ +\n                        \"\\n\" +\n                        \"123 456 789\\\
    n\" +\n                    \"edit\\n\" +\n                        \"1\\n\" +\n\
    \                        \"gender\\n\" +\n                        \"M\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.TRUE;\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.TRUE;\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"person\\n\" +\n                        \"John2\\\
    n\" +\n                        \"Smith2\\n\" +\n                        \"\\n\"\
    \ +\n                        \"\\n\" +\n                        \"123 456 789\\\
    n\" +\n                    \"edit\\n\" +\n                        \"1\\n\" +\n\
    \                        \"number\\n\" +\n                        \"321 654 978\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.TRUE;\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"edit\\n\" +\n                   \
    \     \"1\\n\" +\n                        \"number\\n\" +\n                  \
    \      \"+0 (123) 456-789-12345\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n  \
    \                      || !infoBlock.contains(\"Address: Wall St. 1\")\n     \
    \                   || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.TRUE;\n                }))\n        );\n    }\n\n\
    \    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;
    import java.util.Scanner;
    public class Main {
        public static void main(String[] args) {

            Scanner scanner = new Scanner(System.in);
            BookManager bookManager = new BookManager();
            MenuBuilder menuBuilder = new MenuBuilder(bookManager);
            menuBuilder.callMainMenu(scanner);
        }
    }
  learner_created: false
- name: src/contacts/MenuBuilder.java
  visible: true
  text: |+
    package contacts;

    import java.util.Scanner;

    public class MenuBuilder {
        String choiseMain = "";
        BookManager bookManager;
        MenuBuilder (BookManager bookManager) {
            this.bookManager = bookManager;
        }
        public void callMainMenu(Scanner scanner){
            System.out.println("Enter action (add, remove, edit, count, list, exit): ");
            choiseMain = scanner.nextLine();
            switch (choiseMain) {
                case ("add"):
                    bookManager.add(scanner);
                    this.callMainMenu(scanner);
                    break;
                case ("remove"):
                    if (!bookManager.check()) {
                        System.out.println("No records to remove!");
                        this.callMainMenu(scanner);
                        break;
                    } else {
                        System.out.println("Select a record: ");
                        if (scanner.hasNextLine())
                            bookManager.remove(Integer.parseInt(scanner.nextLine()));
                        this.callMainMenu(scanner);
                        break;
                    }
                case ("edit"):
                    if (!bookManager.check()) {
                        System.out.println("No records to edit!");
                        this.callMainMenu(scanner);
                        break;
                    }
                    else {
                        int i;
                        String parameter = "";
                        String value = "";
                        System.out.println("Select a record: ");
                        if (scanner.hasNextLine()) {
                            i = Integer.parseInt(scanner.nextLine());
                            System.out.println("Select a field (name, surname, number): >");
                            if (scanner.hasNextLine()) {
                                parameter = scanner.nextLine().toLowerCase();
                                if (parameter.equals("name") || parameter.equals("surname") || parameter.equals("number")) {
                                    System.out.println("Enter " + parameter + ": ");
                                    if (scanner.hasNextLine()) value = scanner.nextLine();
                                }
                            }
                            bookManager.edit(i, parameter, value);
                        }
                        this.callMainMenu(scanner);
                        break;
                    }

                case ("count"):
                    bookManager.count();
                    this.callMainMenu(scanner);
                    break;
                case ("list"):
                    bookManager.list();
                    this.callMainMenu(scanner);
                    break;
                case ("exit"):
                    break;
                default: System.out.println("Enter action (add, remove, edit, count, list, exit):");
                    break;
            }
        }

    }

  learner_created: true
- name: src/contacts/BookManager.java
  visible: true
  text: |+
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class BookManager {
        private List<Person> persons = new ArrayList<Person>(0);
        public void add (Scanner scanner) {

            persons.add(PersonCreator.createPerson(scanner));
            System.out.println("The record added!");
        }
        public Boolean remove (int i) {
            Boolean removed = false;
            i--; //because in list first index is 0
            if (persons.size() > i) {
                persons.remove(i);
                removed = true;
                System.out.println("The record removed!");
            } else System.out.println("No records to remove!");
            return  removed;
        }
        public Boolean edit (int i, String parameter, String value) {
            i--; //because in list first index is 0
            Boolean edited = false;
            if (i < persons.size()) {
                Person newPerson = persons.get(i);

                switch (parameter) {
                    case ("name"):
                        newPerson.setName(value);
                        edited = true;
                        break;
                    case ("surname"):
                        newPerson.setSurname(value);
                        edited = true;
                        break;
                    case ("number"):
                        newPerson.setNumber(value);
                        edited = true;
                        break;
                }
                System.out.println("The record updated!");
            } else System.out.println("No records to edit!");
            return edited;
        }
        public void list() {
            if (!persons.isEmpty()) {
                for (int i = 0; i < persons.size(); i++) {
                    System.out.println((i + 1) + ". " + persons.get(i).getName() + " " +
                            persons.get(i).getSurname() + ", " + persons.get(i).getNumber());
                }

            } else {System.out.println("[no number]");}
        }
        public void count() {
            System.out.println("The Phone Book has " + persons.size() + " records.");
        }
        public Boolean check() {
            return (persons.size() > 0) ?  true : false;
        }
    }


  learner_created: true
- name: src/contacts/RecordCreator.java
  visible: true
  text: |
    package contacts;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PersonCreator {
        public static Person createPerson(Scanner scanner){
            Person createdPerson = new Person();
            System.out.println("Enter the name: >");
            createdPerson.setName(scanner.nextLine());
            System.out.println("Enter the surname: >");
            createdPerson.setSurname(scanner.nextLine());
            System.out.println("Enter the number: >");
            createdPerson.setNumber(scanner.nextLine());
            return createdPerson;
        }
    }
    class Person {
        String name, surname;
        private String number;
        public Person() {
            this.number = "[no number]";
        }
        public Person(String name, String surname, String number){
            this.name = name;
            this.surname = surname;
            setNumber(number);
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {
            if (checkNumber(number)) this.number = number;
            else this.number = "[no number]";
        }

        private boolean checkNumber(String number) {
            if (Pattern.compile("\\+?\\([\\w]+\\)((\\-| )\\w{2,})*").matcher(number).matches() ||
                    Pattern.compile("\\+?[\\w]+((\\-| )\\(\\w{2,}\\))((\\-| )\\w{2,})*").matcher(number).matches() ||
                    Pattern.compile("\\+?[\\w]+((\\-| )\\w{2,})*").matcher(number).matches()) {
                return true;
            } else {
                return false;
            }
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getSurname() {
            return surname;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }
        public Boolean hasNumber() {
           if (this.number != null) return true;
           else return false;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/230/implement
status: Solved
record: 3
